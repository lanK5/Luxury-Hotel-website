/**
 * Special sauces for summary table backwards/forwards compatability.
 */

Ext.BLANK_IMAGE_URL = "/images/clear.gif";
Ext.namespace("Vromansys", "Vromansys.menu", "Vromansys.sessionTimeout");


/**
 * @singleton
 * @class Ext.ux.util
 *
 * Contains utilities that do not fit elsewhere
 *
 * @author     Ing. Jozef Sakáloš
 * @copyright  (c) 2009, Ing. Jozef Sakáloš
 * @version    1.0
 * @date       30. January 2009
 * @revision   $Id: Ext.ux.util.js 620 2009-03-09 12:41:44Z jozo $
 *
 * @license
 * Ext.ux.util.js is licensed under the terms of
 * the Open Source LGPL 3.0 license.  Commercial use is permitted to the extent
 * that the code/component(s) do NOT become part of another Open Source or Commercially
 * licensed development library or toolkit without explicit permission.
 *
 * <p>License details: <a href="http://www.gnu.org/licenses/lgpl.html"
 * target="_blank">http://www.gnu.org/licenses/lgpl.html</a></p>
 *
 */
Ext.ns('Ext.ux.util');

/**
 * @param {String} s
 * @return {String} MD5 sum
 * Calculates MD5 sum of the argument
 * @forum   28460
 * @author  <a href="http://extjs.com/forum/member.php?u=13648">wm003</a>
 * @version 1.0
 * @date    20. March 2008
 *
 */
Ext.ux.util.MD5 = function(s) {
    var hexcase = 0;
    var chrsz = 8;

    function safe_add(x, y){
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }
    function bit_rol(num, cnt){
        return (num << cnt) | (num >>> (32 - cnt));
    }
    function md5_cmn(q, a, b, x, s, t){
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
    }
    function md5_ff(a, b, c, d, x, s, t){
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }
    function md5_gg(a, b, c, d, x, s, t){
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }
    function md5_hh(a, b, c, d, x, s, t){
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5_ii(a, b, c, d, x, s, t){
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }

    function core_md5(x, len){
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var a =  1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d =  271733878;
        for(var i = 0; i < x.length; i += 16){
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    }
    function str2binl(str){
        var bin = [];
        var mask = (1 << chrsz) - 1;
        for(var i = 0; i < str.length * chrsz; i += chrsz) {
            bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
        }
        return bin;
    }
    function binl2hex(binarray){
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for(var i = 0; i < binarray.length * 4; i++) {
            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
        }
        return str;
    }
    return binl2hex(core_md5(str2binl(s), s.length * chrsz));
};

/**
 * Clone Function
 * @param {Object/Array} o Object or array to clone
 * @return {Object/Array} Deep clone of an object or an array
 * @author Ing. Jozef Sakáloš
 */
Ext.ux.util.clone = function(o) {
	if(!o || 'object' !== typeof o) {
		return o;
	}
	if('function' === typeof o.clone) {
		return o.clone();
	}
	var c = '[object Array]' === Object.prototype.toString.call(o) ? [] : {};
	var p, v;
	for(p in o) {
		if(o.hasOwnProperty(p)) {
			v = o[p];
			if(v && 'object' === typeof v) {
				c[p] = Ext.ux.util.clone(v);
			}
			else {
				c[p] = v;
			}
		}
	}
	return c;
};

/**
 * Copies the source object properties with names that match target object properties to the target.
 * Undefined properties of the source object are ignored even if names match.
 * This way it is possible to create a target object with defaults, apply source to it not overwriting
 * target defaults with <code>undefined</code> values of source.
 * @param {Object} t The target object
 * @param {Object} s (optional) The source object. Equals to scope in which the function runs if omitted. That
 * allows to set this function as method of any object and then call it in the scope of that object. E.g.:
 * <pre>
 * var p = new Ext.Panel({
 * &nbsp;	 prop1:11
 * &nbsp;	,prop2:22
 * &nbsp;	,<b>applyMatching:Ext.ux.util.applyMatching</b>
 * &nbsp;	// ...
 * });
 * var t = p.applyMatching({prop1:0, prop2:0, prop3:33});
 * </pre>
 * The resulting object:
 * <pre>
 * t = {prop1:11, prop2:22, prop3:33};
 * </pre>
 * @return {Object} Original passed target object with properties updated from source
 */
Ext.ux.util.applyMatching = function(t, s) {
	var s = s || this;
	for(var p in t) {
		if(t.hasOwnProperty(p) && undefined !== s[p]) {
			t[p] = s[p];
		}
	}
	return t;
};

/**
 * Same as {@link Ext#override} but overrides only if method does not exist in the target class
 * @member Ext
 * @param {Object} origclass
 * @param {Object} overrides
 */
Ext.overrideIf = 'function' === typeof Ext.overrideIf ? Ext.overrideIf : function(origclass, overrides) {
	if(overrides) {
		var p = origclass.prototype;
		for(var method in overrides) {
			if(!p[method]) {
				p[method] = overrides[method];
			}
		}
	}
};

/**
 * @class RegExp
 */
if('function' !== typeof RegExp.escape) {
	/**
	 * Escapes regular expression
	 * @param {String} s
	 * @return {String} The escaped string
	 * @static
	 */
	RegExp.escape = function(s) {
		if('string' !== typeof s) {
			return s;
		}
		return s.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, '\\$1');
	};
}
Ext.overrideIf(RegExp, {

	/**
	 * Clones RegExp object
	 * @return {RegExp} Clone of this RegExp
	 */
	 clone:function() {
		return new RegExp(this);
	} // eo function clone
});

Ext.overrideIf(Array, {
	// {{{
	/**
	 * One dimensional copy. Use {@link Ext.ux.util#clone Ext.ux.util.clone} to deeply clone an Array.
	 * @member Array
	 * @return {Array} New Array that is copy of this
	 */
	 copy:function() {
		var a = [];
		for(var i = 0, l = this.length; i < l; i++) {
			a.push(this[i]);
		}
		return a;
	}
	/**
	 * Not used anyway as Ext has its own indexOf
	 * @member Array
	 * @return {Integer} Index of v or -1 if not found
	 * @param {Mixed} v Value to find indexOf
	 * @param {Integer} b Starting index
	 */
	,indexOf:function(v, b) {
		for(var i = +b || 0, l = this.length; i < l; i++) {
			if(this[i] === v) {
				return i;
			}
		}
		return -1;
	}

	/**
	 * Returns intersection of this Array and passed arguments
	 * @member Array
	 * @return {Array} Intersection of this and passed arguments
	 * @param {Mixed} arg1 (optional)
	 * @param {Mixed} arg2 (optional)
	 * @param {Mixed} etc. (optional)
	 */
	,intersect:function() {
		if(!arguments.length) {
			return [];
		}
		var a1 = this, a2, a;
		for(var k = 0, ac = arguments.length; k < ac; k++) {
			a = [];
			a2 = arguments[k] || [];
			for(var i = 0, l = a1.length; i < l; i++) {
				if(-1 < a2.indexOf(a1[i])) {
					a.push(a1[i]);
				}
			}
			a1 = a;
		}
		return a.unique();
	}

	/**
	 * Returns last index of passed argument
	 * @member Array

	 * @return {Integer} Index of v or -1 if not found
	 * @param {Mixed} v Value to find indexOf
	 * @param {Integer} b Starting index
	 */
	,lastIndexOf:function(v, b) {
		b = +b || 0;
		var i = this.length;
		while(i-- > b) {
			if(this[i] === v) {
				return i;
			}
		}
		return -1;
	}

	/**
	 * @member Array
	 * @return {Array} New Array that is union of this and passed arguments
	 * @param {Mixed} arg1 (optional)
	 * @param {Mixed} arg2 (optional)
	 * @param {Mixed} etc. (optional)
	 */
	,union:function() {
		var a = this.copy(), a1;
		for(var k = 0, ac = arguments.length; k < ac; k++) {
			a1 = arguments[k] || [];
			for(var i = 0, l = a1.length; i < l; i++) {
				a.push(a1[i]);
			}
		}
		return a.unique();
	}

	/**
	 * Removes duplicates from array
	 * @member Array
	 * @return {Array} New Array with duplicates removed
	 */
	,unique:function() {
		var a = [], i, l = this.length;
		for(i = 0; i < l; i++) {
			if(a.indexOf(this[i]) < 0) {
				a.push(this[i]);
			}
		}
		return a;
	}

});




/**
 * @class Ext.ux.state.HttpProvider
 * @extends Ext.state.Provider
 *
 * Buffering state provider that sends and receives state information to/from server
 *
 * @author    Ing. Jozef Sakáloš
 * @copyright (c) 2008, Ing. Jozef Sakáloš
 * @version   1.2
 * @revision  $Id: Ext.ux.state.HttpProvider.js 728 2009-06-16 16:31:16Z jozo $
 * @depends   Ext.ux.util
 *
 * @license Ext.ux.state.HttpProvider is licensed under the terms of
 * the Open Source LGPL 3.0 license.  Commercial use is permitted to the extent
 * that the code/component(s) do NOT become part of another Open Source or Commercially
 * licensed development library or toolkit without explicit permission.
 *
 * <p>License details: <a href="http://www.gnu.org/licenses/lgpl.html"
 * target="_blank">http://www.gnu.org/licenses/lgpl.html</a></p>
 *
 */
Ext.ns('Ext.ux.state');

/**
 * Creates new HttpProvider
 * @constructor
 * @param {Object} config Configuration object
 */
Ext.ux.state.HttpProvider = function(config) {

    this.addEvents(
        /**
         * @event readsuccess
         * Fires after state has been successfully received from server and restored
         * @param {HttpProvider} this
         */
         'readsuccess'
        /**
         * @event readfailure
         * Fires in the case of an error when attempting to read state from server
         * @param {HttpProvider} this
         */
        ,'readfailure'
        /**
         * @event savesuccess
         * Fires after the state has been successfully saved to server
         * @param {HttpProvider} this
         */
        ,'savesuccess'
        /**
         * @event savefailure
         * Fires in the case of an error when attempting to save state to the server
         * @param {HttpProvider} this
         */
        ,'savefailure'
    );

    // call parent
    Ext.ux.state.HttpProvider.superclass.constructor.call(this);

    Ext.apply(this, config, {
        // defaults
         delay:750 // buffer changes for 750 ms
        ,dirty:false
        ,started:false
        ,autoStart:true
        ,autoRead:true
        ,user:'user'
        ,id:1
        ,session:'sessionParam'
        ,logFailure:false
        ,logSuccess:false
        ,queue:[]
        ,url:'.'
        ,readUrl:undefined
        ,saveUrl:undefined
        ,method:'post'
        ,saveBaseParams:{}
        ,readBaseParams:{}
        ,paramNames:{
             id:'id'
            ,name:'name'
            ,value:'value'
            ,user:'user'
            ,session:'sessionParam'
            ,data:'data'
        }
    }); // eo apply

    if(this.autoRead) {
        this.readState();
    }

    this.dt = new Ext.util.DelayedTask(this.submitState, this);
    if(this.autoStart) {
        this.start();
    }
};

Ext.extend(Ext.ux.state.HttpProvider, Ext.state.Provider, {
    // localizable texts
     saveSuccessText:'Save Success'
    ,saveFailureText:'Save Failure'
    ,readSuccessText:'Read Success'
    ,readFailureText:'Read Failure'
    ,dataErrorText:'Data Error'

    // {{{
    /**
     * Initializes state from the passed state object or array.
     * This method can be called early during page load having the state Array/Object
     * retrieved from database by server.
     * @param {Array/Object} state State to initialize state manager with
     */
    ,initState:function(state) {
        if(state instanceof Array) {
			Ext.each(state, function(item) {
                this.state[item.name] = this.decodeValue(item[this.paramNames.value]);
				try {
					if(this.state && item.name && this.state[item.name]) {
						var result = $.grep(this.state[item.name].columns, function(e){ return e.id == 'controls'; });
						if (result.length == 1 && result[0] && result[0].width) {
							result[0].width = 100;
						}
					}
				} catch(e) {
					// error setting controls width, continue
				}
            }, this);
        }

        else {
            this.state = state ? state : {};
        }
    }

    /**
     * Sets the passed state variable name to the passed value and queues the change
     * @param {String} name Name of the state variable
     * @param {Mixed} value Value of the state variable
     */
    ,set:function(name, value) {
        if(!name) {
            return;
        }

        this.queueChange(name, value);

    }

    /**
     * Starts submitting state changes to server
     */
    ,start:function() {
        this.dt.delay(this.delay);
        this.started = true;
    }

    /**
     * Stops submitting state changes
     */
    ,stop:function() {
        this.dt.cancel();
        this.started = false;
    }

    /**
     * private, queues the state change if state has changed
     */
    ,queueChange:function(name, value) {
        var o = {};
        var i;
        var found = false;

        // see http://extjs.com/forum/showthread.php?p=344233
        var lastValue = this.state[name];
        for(i = 0; i < this.queue.length; i++) {
            if(this.queue[i].name === name) {
                lastValue = this.decodeValue(this.queue[i].value);
            }
        }
        var changed = undefined === lastValue || lastValue !== value;

        if(changed) {
            o[this.paramNames.name] = name;
            o[this.paramNames.value] = this.encodeValue(value);
            for(i = 0; i < this.queue.length; i++) {
                if(this.queue[i].name === o.name) {
                    this.queue[i] = o;
                    found = true;
                }
            }
            if(false === found) {
                this.queue.push(o);
            }
            this.dirty = true;
        }
        if(this.started) {
            this.start();
        }
        return changed;
    }

    /**
     * private, submits state to server by asynchronous Ajax request
     */
    ,submitState:function() {
        if(!this.dirty) {
            this.dt.delay(this.delay);
            return;
        }
        this.dt.cancel();

        var o = {
             url:this.saveUrl || this.url
            ,method:this.method
            ,scope:this
            ,success:this.onSaveSuccess
            ,failure:this.onSaveFailure
            ,queue:Ext.ux.util.clone(this.queue)
            ,params:{}
        };

        var params = Ext.apply({}, this.saveBaseParams);
        params[this.paramNames.id] = this.id;
        params[this.paramNames.user] = this.user;
        params[this.paramNames.sessionParam] = this.session;
        params[this.paramNames.data] = Ext.encode(o.queue);

        Ext.apply(o.params, params);

        // be optimistic
        this.dirty = false;

        Ext.Ajax.request(o);
    }

    /**
     * Clears the state variable
     * @param {String} name Name of the variable to clear
     */
    ,clear:function(name) {
        this.set(name, undefined);
    }

    /**
     * private, save success callback
     */
    ,onSaveSuccess:function(response, options) {
        var o = {};
        try {o = Ext.decode(response.responseText);}
        catch(e) {
            if(true === this.logFailure) {
                this.log(this.saveFailureText, e, response);
            }
            this.dirty = true;
            return;
        }
        if(true !== o.success) {
            if(true === this.logFailure) {
                this.log(this.saveFailureText, o, response);
            }
            this.dirty = true;
        }
        else {
            Ext.each(options.queue, function(item) {
                if(!item) {
                    return;
                }
                var name = item[this.paramNames.name];
                var value = this.decodeValue(item[this.paramNames.value]);

                if(undefined === value || null === value) {
                    Ext.ux.state.HttpProvider.superclass.clear.call(this, name);
                }
                else {
                    // parent sets value and fires event
                    Ext.ux.state.HttpProvider.superclass.set.call(this, name, value);
                }
            }, this);
            if(false === this.dirty) {
                this.queue = [];
            }
            else {
                var i, j, found;
                for(i = 0; i < options.queue.length; i++) {
                    found = false;
                    for(j = 0; j < this.queue.length; j++) {
                        if(options.queue[i].name === this.queue[j].name) {
                            found = true;
                            break;
                        }
                    }
                    if(true === found && this.encodeValue(options.queue[i].value) === this.encodeValue(this.queue[j].value)) {
                        this.queue.remove(this.queue[j]);
                    }
                }
            }
            if(true === this.logSuccess) {
                this.log(this.saveSuccessText, o, response);
            }
            this.fireEvent('savesuccess', this);
        }
    }

    /**
     * private, save failure callback
     */
    ,onSaveFailure:function(response, options) {
        if(true === this.logFailure) {
            this.log(this.saveFailureText, response);
        }
        this.dirty = true;
        this.fireEvent('savefailure', this);
    }

    /**
     * private, read state callback
     */
    ,onReadFailure:function(response, options) {
        if(true === this.logFailure) {
            this.log(this.readFailureText, response);
        }
        this.fireEvent('readfailure', this);

    }

    /**
     * private, read success callback
     */
    ,onReadSuccess:function(response, options) {
        var o = {}, data;
        try {o = Ext.decode(response.responseText);}
        catch(e) {
            if(true === this.logFailure) {
                this.log(this.readFailureText, e, response);
            }
            return;
        }
        if(true !== o.success) {
            if(true === this.logFailure) {
                this.log(this.readFailureText, o, response);
            }
        }
        else {
            data = o[this.paramNames.data];
            if(!(data instanceof Array) && true === this.logFailure) {
                this.log(this.dataErrorText, data, response);
                return;
            }
            Ext.each(data, function(item) {
                this.state[item[this.paramNames.name]] = this.decodeValue(item[this.paramNames.value]);
            }, this);
            this.queue = [];
            this.dirty = false;
            if(true === this.logSuccess) {
                this.log(this.readSuccessText, data, response);
            }
            this.fireEvent('readsuccess', this);
        }
    }

    /**
     * Reads saved state from server by sending asynchronous Ajax request and processing the response
     */
    ,readState:function() {
        var o = {
             url:this.readUrl || this.url
            ,method:this.method
            ,scope:this
            ,success:this.onReadSuccess
            ,failure:this.onReadFailure
            ,params:{}
        };

        var params = Ext.apply({}, this.readBaseParams);
        params[this.paramNames.id] = this.id;
        params[this.paramNames.user] = this.user;
        params[this.paramNames.sessionParam] = this.session;

        Ext.apply(o.params, params);
        Ext.Ajax.request(o);
    }

    /**
     * private, logs errors or successes
     */
    ,log:function() {
        if(console) {
            console.log.apply(console, arguments);
        }
    }

});


/**
  * Ext.ux.IconCombo Extension Class
  *
  * @author  Jozef Sakalos
  * @version 1.0
  *
  * @class Ext.ux.IconCombo
  * @extends Ext.form.ComboBox
  * @constructor
  * @param {Object} config Configuration options
  */
Ext.ux.IconCombo = function(config) {
    // call parent constructor
    Ext.ux.IconCombo.superclass.constructor.call(this, config);

    this.tpl = config.tpl ||
          '<tpl for="."><div class="x-combo-list-item x-icon-combo-item {'
        + this.iconClsField
        + '}">{'
        + this.displayField
        + '}</div></tpl>'
    ;

    this.on({
        render:{scope:this, fn:function() {
            var wrap = this.el.up('div.x-form-field-wrap');
            this.wrap.applyStyles({position:'relative'});
            this.el.addClass('x-icon-combo-input');
            this.flag = Ext.DomHelper.append(wrap, {
                tag: 'div', style:'position:absolute'
            });
        }}
    });
}

Ext.extend(Ext.ux.IconCombo, Ext.form.ComboBox, {

    setIconCls: function() {
        var rec = this.store.query(this.valueField, this.getValue()).itemAt(0);
        if(rec) {
            this.flag.className = 'x-icon-combo-icon ' + rec.get(this.iconClsField);
        }
    },

    setValue: function(value) {
        Ext.ux.IconCombo.superclass.setValue.call(this, value);
        this.setIconCls();
    }

});




Ext.namespace('Ext.ux');
/**
 * @class Ext.ux.FitToParent
 * @extends Object
 * <p>Plugin for {@link Ext.BoxComponent BoxComponent} and descendants that adjusts the size of the component to fit inside a parent element</p>
 * <p>The following example will adjust the size of the panel to fit inside the element with id="some-el":<pre><code>
var panel = new Ext.Panel({
    title: 'Test',
    renderTo: 'some-el',
    plugins: ['fittoparent']
});</code></pre></p>
 * <p>It is also possible to specify additional parameters:<pre><code>
var panel = new Ext.Panel({
    title: 'Test',
    renderTo: 'other-el',
    autoHeight: true,
    plugins: [
        new Ext.ux.FitToParent({
            parent: 'parent-el',
            fitHeight: false,
            offsets: [10, 0]
        })
    ]
});</code></pre></p>
 * <p>The element the component is rendered to needs to have <tt>style="overflow:hidden"</tt>, otherwise the component will only grow to fit the parent element, but it will never shrink.</p>
 * <p>Note: This plugin should not be used when the parent element is the document body. In this case you should use a {@link Ext.Viewport Viewport} container.</p>
 */
Ext.ux.FitToParent = Ext.extend(Object, {
    /**
     * @cfg {HTMLElement/Ext.Element/String} parent The element to fit the component size to (defaults to the element the component is rendered to).
     */
    /**
     * @cfg {Boolean} fitWidth If the plugin should fit the width of the component to the parent element (default <tt>true</tt>).
     */
    fitWidth: true,
    /**
     * @cfg {Boolean} fitHeight If the plugin should fit the height of the component to the parent element (default <tt>true</tt>).
     */
    fitHeight: true,
    /**
     * @cfg {Boolean} offsets Decreases the final size with [width, height] (default <tt>[0, 0]</tt>).
     */
    offsets: [0, 0],
    /**
     * @constructor
     * @param {HTMLElement/Ext.Element/String/Object} config The parent element or configuration options.
     * @ptype fittoparent
     */
    constructor: function(config) {
        config = config || {};
        if(config.tagName || config.dom || Ext.isString(config)){
            config = {parent: config};
        }
        Ext.apply(this, config);
    },
    init: function(c) {
        this.component = c;
        c.on('render', function(c) {
            this.parent = Ext.get(this.parent || c.getPositionEl().dom.parentNode);
            if(c.doLayout){
                c.monitorResize = true;
                c.doLayout = c.doLayout.createInterceptor(this.fitSize, this);
            } else {
                this.fitSize();
                Ext.EventManager.onWindowResize(this.fitSize, this);
            }
        }, this, {single: true});
	},
	fitSize: function() {
		var pos = this.component.getPosition(true), size = this.parent.getViewSize();
		// this.component.setSize(this.fitWidth ? size.width - pos[0] - this.offsets[0] : undefined, this.fitHeight ? size.height - pos[1] - this.offsets[1] : undefined);
		this.component.setWidth(this.fitWidth ? size.width - pos[0] - this.offsets[0] : undefined);
	}
});
Ext.preg('fittoparent', Ext.ux.FitToParent);




// BEGIN FS
var store;
var grid;
var HEIGHT_ADJUST = 115; // offset - height of content above the table
var summaryTableView = 13;
var storeLoaded = false;
var noResults = 'There are no results to display.';
var noResultsSearch = 'This search yielded no results. <a href="javascript:void(0);" onclick="$(\'#Filter optgroup>option:eq()\').prop(\'selected\', true); doFilter();">Click here</a> to remove the search term and show all of the results.';

loadGrid = function(gridName, apiUrl, dataFields, storeParams, sPreferences) {
	// create the Data Store
	store = new Ext.data.Store({
		url: apiUrl,
		baseParams: storeParams,
		restful:true,
		remoteSort: true,
		autoDestroy: true,
		reader: new Ext.data.JsonReader({
			idProperty: 'metas.id',
			root: 'results',
			totalProperty: 'total_results'
		}, dataFields),
		paramNames:{
			start : 'start',
			limit : 'fs_limit',
			sort : 'fs_sort',
			dir : 'fs_sort_direction'
		}
	});
	storeLoad = function(store, records, options){
		if(grid) {
			if(store.getTotalCount() <= 0){
				store.removeAll(false);
				grid.body.mask(document.getElementById('Search').value!=''?noResultsSearch:noResults)
			}
			if(grid.disabled){
				grid.enable();
			}
		}
		storeLoaded=true;
		// Set the start param for the store correctly based on the page and number of results per page.
		if(store.lastOptions.params.fs_page > 1) {
			var start = (store.lastOptions.params.fs_page - 1) * store.lastOptions.params.fs_limit;
			store.lastOptions.params.start= start;
		}
	};
	storeException = function(misc, type, action, options, response, arg) {
		if(grid) {
			store.removeAll(false);
			if(response.responseText && response.responseText.indexOf("<html") < 0) {
				grid.body.mask(response.responseText);
			} else {
				grid.body.mask(	document.getElementById('Search').value!=''?noResultsSearch:noResults);
			}
			if(grid.disabled){
				grid.enable();
			}
		}
		storeLoaded=true;
	};
	store.on('beforeload', function(store, options){ if(grid && grid.body) { grid.body.unmask(); } });
	store.on('load', storeLoad);
	store.on('exception', storeException);

	if(storeParams.fs_view == summaryTableView) {
		Ext.state.Manager.setProvider(new Ext.ux.state.HttpProvider({
			url:'FormSite',
			saveBaseParams:{FormId:'ResultsTableStateSave'},
			autoRead:false
		}));
		Ext.state.Manager.getProvider().initState([{"name":gridName,"value":sPreferences}]);

		var state = Ext.state.Manager.getProvider().state;
		if(state && state[gridName] && state[gridName].sort) {
			storeParams.fs_sort = state[gridName].sort.field;
			storeParams.fs_sort_direction = state[gridName].sort.direction;
		}
	}

	// trigger the data store load
	store.load({method: 'GET',params:storeParams});
};

renderGrid = function(gridName, gridColumns, checkboxes) {
	var pagingToolbar = new Ext.PagingToolbar({
		pageSize: Number(store.lastOptions.params.fs_limit),
		store: store,
		displayInfo: true,
		displayMsg: 'Displaying results {0} - {1} of {2}',
		emptyMsg: "No results to display",
		id:'pagingToolbar',
		items: ['->', new Ext.form.ComboBox({
			store: [[25,'25 results per page'],[50,'50 results per page'],[75,'75 Results per Page'],[100,'100 results per page']],
			value:store.lastOptions.params.fs_limit,
			triggerAction: 'all',
			emptyText:'Page Size',
			valueNotFoundText: 'Page Size',
			title: 'Page Size',
			selectOnFocus:true,
			forceSelection:true,
			editable:false,
			listeners:{
				collapse:function(combo) {
					var value = combo.getValue();
					if(value != store.lastOptions.params.fs_limit) {
						var nLimit = Number(value);
						store.setBaseParam('fs_limit', nLimit);
						pagingToolbar.pageSize = nLimit;
						var storeOptions = store.lastOptions.params;
						storeOptions.fs_limit = nLimit;
						store.load({method: 'GET',params:storeOptions});
					}
				}
			}
		})]
	});

	// create the grid
	grid = new Ext.grid.EditorGridPanel({
	store: store,
	columns: gridColumns,
	sm: checkboxes,
	stripeRows: false,
	loadMask: true,
	disabled: true,
	trackMouseOver: true,
	stateful: true,
	stateId: gridName,
	enableColumnHide: false, //disable column hide/show option from menu
	clicksToEdit: 1,
	viewConfig: {
		templates: { // re-enable selectable text
		cell: new Ext.Template('<td class="x-grid3-col x-grid3-cell x-grid3-td-{id} x-selectable {css}" style="{style}" tabIndex="0" {cellAttr}>', '<div class="x-grid3-cell-inner x-grid3-col-{id}" {attr}>{value}</div>', '</td>')
		}
	},
	renderTo: "results-grid",
	plugins: [new Ext.ux.FitToParent("results-grid")],
	bbar: pagingToolbar,
	tbar: [{
		text: 'Delete',
		cls: 'x-btn-text-icon link-trash',
		icon: '/images/layout/internal2/icons/trash.svg',
		ref: '../deleteButton',
		disabled: true,
		handler: function(btn, pressed) {
			Vromansys.showDeleteResultsDialog();
		}
	},
	'->', {
		text: 'Show/hide columns',
		cls: 'x-btn-text-icon link-columns',
		icon: '/images/layout/internal2/icons/columns.svg',
		handler: function(btn, pressed) {
			var viewSelect = $('#DefaultView')[0];
			$("#dialog-columns").dialog('open');
		}
	},
	'->', {
		text: 'Reset display',
		cls: 'x-btn-text-icon link-reset',
		icon:'/images/layout/internal2/icons/reset.svg',
		handler: function(btn, pressed) {
			Ext.state.Manager.clear(gridName);
			Vromansys.reloadPage('&ResetView');
		}
	}],
	columnWidth: 1
	});

	grid.setHeight(Ext.get("wrapper-right").getHeight() - HEIGHT_ADJUST - $("#selectors").height());
	Ext.EventManager.onWindowResize(function() {
		var heightNew = Ext.get("wrapper-right").getHeight() - HEIGHT_ADJUST - $("#selectors").height();
		grid.setHeight(heightNew);
		$("#item-selector").height(heightNew-100);
	});

	pagingToolbar.on('beforechange',function( toolbar, params ) {
		params.fs_page = Math.ceil((Number(params.start) - 1) / Number(params.fs_limit)) + 1;
	});

	grid.on('render', function(thisGrid) {
		if(storeLoaded && grid.disabled) {
			grid.enable();
		}
	});

	grid.on('cellclick', function( thisGrid, rowIndex, colIndex, e) {
		var target = e.getTarget();
		var field = thisGrid.getColumnModel().getDataIndex(colIndex)
		if(colIndex > 1 && target.className != 'payment-history' && target.tagName != 'A' && field != 'STATUS' && field != 'FORM_LOGIN_USERNAME') {
			var row = Ext.fly(this.getView().getRow(rowIndex));
			if(row.hasClass('grid-row-highlighted')) {
				row.removeClass('grid-row-highlighted');
			} else {
				row.addClass('grid-row-highlighted');
			}
		}
	});

	// handle status changes
	grid.on('afteredit', function (editEvent) {
		if(editEvent.value == editEvent.originalValue) {
			return; // nothing to do
		}

		Ext.Ajax.request({
			url: 'FormSite',
			method: 'POST',
			params: {
				FormId: 'ResultsTableStatusChange',
				ResultNbr: editEvent.record.id,
				Field: editEvent.field,
				Value: editEvent.value
			},
			failure:function(response,options) {
				alert('Status could not be saved.');
			},
			success:function(response,options) {
				var successMarker = 'SUCCESS:';
				if(response.responseText.length >= successMarker.length && response.responseText.substring(0,successMarker.length) == successMarker) {
					if(editEvent.field == "FORM_LOGIN_USERNAME") {
						var email = response.responseText.split(":")[1];
						editEvent.record.set("FORM_LOGIN_EMAIL", email);

						if(editEvent.value == "N/A") {
							editEvent.record.set("FORM_LOGIN_USERNAME", "");
						}
					}

					store.commitChanges();
				} else {
					var sErrorPageKey = '<div id="message-outer" class="error"><div><b>Error:</b><br/>';
					if(response.responseText.indexOf(sErrorPageKey) > -1) {
						// error page
						var nBegin = response.responseText.indexOf(sErrorPageKey) + sErrorPageKey.length;
						var nEnd = response.responseText.indexOf('</div></div>');
						var sError = response.responseText.substring(nBegin, nEnd);
						alert(sError);
					} else {
						// custom message
						var text = response.responseText;
						text = text.replace("ERROR: ", "");
						alert(text);
					}
					store.rejectChanges();
				}
			}
		});
	});

	var evt = document.createEvent('UIEvents');
	evt.initUIEvent('resize', true, false,window,0);
	window.dispatchEvent(evt);

	var theSelectionModel = grid.getSelectionModel();
	theSelectionModel.onEditorKey = function(field, e){
		var k = e.getKey(), newCell, g = theSelectionModel.grid, ed = g.activeEditor;
		if(k == e.ENTER && !e.ctrlKey){
			e.stopEvent();
			if(ed) {
				ed.completeEdit();
			}
		}
	};

	Vromansys.InfoPanel = function() {
		var HEIGHT = 75;
		var WIDTH = 250;

		var hideTimeout;

		var panelEl;
		var activeItem;

		return {
			/**
			 * Init
			 */
			init: function() {
				var newEl = document.getElementById("item-highlight-panel");
				if(!newEl) {
					newEl = document.createElement("div");
					newEl.style.fontSize = "13px";
					newEl.style.position = "absolute";
					newEl.style.zIndex = 1000;
					newEl.style.height = HEIGHT + "px";
					newEl.style.width = WIDTH + "px";
					newEl.style.overflow = "auto";
					newEl.style.display = "none";
					newEl.style.backgroundColor = "#E8F9EE";
					newEl.style.padding = "4px";
					newEl.style.border = "1px solid #D7D7D7";

					panelEl = Ext.get(document.body.insertBefore(newEl, document.body.firstChild));
				}

				panelEl.hide(); // fix for wrong alignment on first show
			},

			 /**
			  * Show
			  */
			 show: function(id) {
				this.resetTimeout();

				var el = document.getElementById(id);

				if(el == activeItem) {
					return; // already showing on this item
				}
				activeItem = el;

				panelEl.alignTo(el, "tr-bl?");
				panelEl.show();

				panelEl.on("mouseover", this.resetTimeout, this);
				panelEl.on("mouseout", this.hide, this);
			},

			/**
			 * Hide
			 */
			hide: function() {
				clearTimeout(hideTimeout);

				hideTimeout = setTimeout(function() {
					panelEl.hide();
					activeItem = null;
				}, 500);
			},

			/**
			 * Set the text
			 */
			setText: function(text) {
				 panelEl.dom.innerHTML = text;
			},

			/**
			 * Reset hide timeout
			 */
			resetTimeout: function() {
				clearTimeout(hideTimeout);
			}

		};
	}();
};
